# PDF Render: output: pdf_document
# NOTE: Use code below if you can't load data files
# setwd("/path/to/project/directory")
# Include libraries
library(smoof)
library(GA)
library(ggplot2)
library(hrbrthemes)
# Define number of calculations for each algorithm
number_of_calculations <- 50L
loadData <- function(filename) {
#' Loads data from file
#'
#' @param filename Name of the file
#' @return Returns data from file, otherwise NULL if file does not exist
if (file.exists(filename)) {
return(readRDS(filename))
}else {
return(NULL)
}
}
saveData <- function(data, filename) {
#' Saves data to file
#'
#' @param data Data to save
#' @param filename Name of the file
#' @return Returns data parameter
saveRDS(data, filename)
return(data)
}
prs_algorithm <- function(f, cost = 1000L) {
#' Pure Random Search algorithm
#'
#' @param f Function to minimize (from spoof package)
#' @param cost Number of calculations
#' @return Returns function value
if (!isSmoofFunction(f)) {
stop("Function is not from smoof package.")
}
# Generate points
domain_min <- getLowerBoxConstraints(f)
domain_max <- getUpperBoxConstraints(f)
points <- matrix(0, nrow = cost, ncol = length(domain_min))
for (i in seq_along(domain_min)) {
uniform_distribution_points <- runif(cost, domain_min[i], domain_max[i])
for (j in seq_along(uniform_distribution_points)) {
points[j, i] <- uniform_distribution_points[j]
}
}
# Return minimum function value
return(min(apply(points, 1, f)))
}
prs_rosenbrock_2D <- loadData("./data/prs_rosenbrock_2D.rds")
if (is.null(prs_rosenbrock_2D)) prs_rosenbrock_2D <- saveData(replicate(number_of_calculations, prs_algorithm(rosenbrock_2D)), "./data/prs_rosenbrock_2D.rds")
mean_prs_rosenbrock_2D <- mean(prs_rosenbrock_2D)
prs_rosenbrock_10D <- loadData("./data/prs_rosenbrock_10D.rds")
if (is.null(prs_rosenbrock_10D)) prs_rosenbrock_10D <- saveData(replicate(number_of_calculations, prs_algorithm(rosenbrock_10D)), "./data/prs_rosenbrock_10D.rds")
mean_prs_rosenbrock_10D <- mean(prs_rosenbrock_10D)
prs_rosenbrock_20D <- loadData("./data/prs_rosenbrock_20D.rds")
if (is.null(prs_rosenbrock_20D)) prs_rosenbrock_20D <- saveData(replicate(number_of_calculations, prs_algorithm(rosenbrock_20D)), "./data/prs_rosenbrock_20D.rds")
mean_prs_rosenbrock_20D <- mean(prs_rosenbrock_20D)
prs_rastrigin_2D <- loadData("./data/prs_rastrigin_2D.rds")
if (is.null(prs_rastrigin_2D)) prs_rastrigin_2D <- saveData(replicate(number_of_calculations, prs_algorithm(rastrigin_2D)), "./data/prs_rastrigin_2D.rds")
mean_prs_rastrigin_2D <- mean(prs_rastrigin_2D)
prs_rastrigin_10D <- loadData("./data/prs_rastrigin_10D.rds")
if (is.null(prs_rastrigin_10D)) prs_rastrigin_10D <- saveData(replicate(number_of_calculations, prs_algorithm(rastrigin_10D)), "./data/prs_rastrigin_10D.rds")
mean_prs_rastrigin_10D <- mean(prs_rastrigin_10D)
prs_rastrigin_20D <- loadData("./data/prs_rastrigin_20D.rds")
if (is.null(prs_rastrigin_20D)) prs_rastrigin_20D <- saveData(replicate(number_of_calculations, prs_algorithm(rastrigin_20D)), "./data/prs_rastrigin_20D.rds")
mean_prs_rastrigin_20D <- mean(prs_rastrigin_20D)
ga_algorithm <- function(f, cost = 1000L) {
#' Genetic Algorithm
#'
#' @param f Function to minimize (from spoof package)
#' @param cost Number of calculations
#' @return Returns function value
if (!isSmoofFunction(f)) {
stop("Function is not from smoof package.")
}
result <- ga(type = "real-valued",
fitness = function(x) -f(x),
lower = getLowerBoxConstraints(f),
upper = getUpperBoxConstraints(f),
maxiter = cost,
run = cost)
return(f(result@solution))
}
ga_rosenbrock_2D <- loadData("./data/ga_rosenbrock_2D.rds")
if (is.null(ga_rosenbrock_2D))ga_rosenbrock_2D <- saveData(replicate(number_of_calculations, ga_algorithm(rosenbrock_2D)), "./data/ga_rosenbrock_2D.rds")
mean_ga_rosenbrock_2D <- mean(ga_rosenbrock_2D)
ga_rosenbrock_10D <- loadData("./data/ga_rosenbrock_10D.rds")
if (is.null(ga_rosenbrock_10D)) ga_rosenbrock_10D <- saveData(replicate(number_of_calculations, ga_algorithm(rosenbrock_10D)), "./data/ga_rosenbrock_10D.rds")
mean_ga_rosenbrock_10D <- mean(ga_rosenbrock_10D)
ga_rosenbrock_20D <- loadData("./data/ga_rosenbrock_20D.rds")
if (is.null(ga_rosenbrock_20D)) ga_rosenbrock_20D <- saveData(replicate(number_of_calculations, ga_algorithm(rosenbrock_20D)), "./data/ga_rosenbrock_20D.rds")
mean_ga_rosenbrock_20D <- mean(ga_rosenbrock_20D)
ga_rastrigin_2D <- loadData("./data/ga_rastrigin_2D.rds")
if (is.null(ga_rastrigin_2D)) ga_rastrigin_2D <- saveData(replicate(number_of_calculations, ga_algorithm(rastrigin_2D)), "./data/ga_rastrigin_2D.rds")
mean_ga_rastrigin_2D <- mean(ga_rastrigin_2D)
ga_rastrigin_10D <- loadData("./data/ga_rastrigin_10D.rds")
if (is.null(ga_rastrigin_10D)) ga_rastrigin_10D <- saveData(replicate(number_of_calculations, ga_algorithm(rastrigin_10D)), "./data/ga_rastrigin_10D.rds")
mean_ga_rastrigin_10D <- mean(ga_rastrigin_10D)
ga_rastrigin_20D <- loadData("./data/ga_rastrigin_20D.rds")
if (is.null(ga_rastrigin_20D)) ga_rastrigin_20D <- saveData(replicate(number_of_calculations, ga_algorithm(rastrigin_20D)), "./data/ga_rastrigin_20D.rds")
mean_ga_rastrigin_20D <- mean(ga_rastrigin_20D)
draw_plots <- function(prs, ga) {
#' Draw algorithm results plots
#'
#' @param prs PRS algorithm results
#' @param ga GA algorithm results
#' @return Returns nothing, just draws plots
# PRS Algorithm
hist(prs, col = "yellow", xlab = "Return value of PRS Algorithm")
boxplot(prs, col = 'yellow', ylab = "Return value of PRS Algorithm", main = "Boxplot of PRS Algorithm")
# GA Algorithm
hist(ga, col = "green", xlab = "Return value of GA Algorithm")
boxplot(ga, col = 'green', ylab = "Return value of GA Algorithm", main = "Boxplot of GA Algorithm")
# Comparison
data <- data.frame(prs, ga)
func <- c(rep("PRS", length(prs)), rep("GA", length(ga)))
value <- c(prs, ga)
data <- data.frame(func, value)
boxplot(data$value ~ data$func, col = terrain.colors(4))
}
draw_plots(prs_rosenbrock_2D, ga_rosenbrock_2D)
draw_plots(prs_rosenbrock_10D, ga_rosenbrock_10D)
draw_plots(prs_rosenbrock_20D, ga_rosenbrock_20D)
draw_plots(prs_rastrigin_2D, ga_rastrigin_2D)
run_t.test(prs_rosenbrock_2D, ga_rosenbrock_2D, label_1 = "PRS algorithm result", label_2 = "GA algorithm result")
run_t.test <- function (data_x, data_y, mu=0, alpha=0.05, label_1 = "x", label_2 = "y") {
#' Runs t-test on two data sets
#'
#' @param data_x First data set
#' @param data_y Second data set
#' @param mu Mean value
#' @param alpha Significance level
#' @param label_1 Label for first data set
#' @param label_2 Label for second data set
#' @return Returns t-test result
test <- t.test(data_x, data_y, mu=mu, alternative="two.sided", conf.level=1-alpha)
p_value <- test$p.value
if (p_value <= alpha) {
hypothesis_analysis_result <- "Conclusion: hypothesis is false, because p_value <= alpha"
}else{
hypothesis_analysis_result <- "Conclusion: not enough information if hypothesis is false, because p_value > alpha"
}
cat(sep = "",
"t = ", test$statistic, '\n',
"df = ", test$parameter, '\n',
"p-value = ", test$p.value, '\n',
"hypothesis: true difference in means is equal to ", mu, '\n',
"alternative hypothesis: true difference in means is not equal to ", mu, '\n',
attr(test$conf.int, "conf.level")*100, " percent confidence interval: [", test$conf.int[1],", ", test$conf.int[2], "]\n",
"sample estimates:", '\n',
"   mean of ", label_1, " = ", test$estimate[1], '\n',
"   mean of ", label_2, " = ", test$estimate[2], '\n',
'\n',
hypothesis_analysis_result
)
}
run_t.test(prs_rosenbrock_2D, ga_rosenbrock_2D, label_1 = "PRS algorithm result", label_2 = "GA algorithm result")
run_t.test(prs_rosenbrock_10D, ga_rosenbrock_10D, label_1 = "PRS algorithm result", label_2 = "GA algorithm result")
run_t.test(prs_rosenbrock_20D, ga_rosenbrock_20D, label_1 = "PRS algorithm result", label_2 = "GA algorithm result")
run_t.test(prs_rastrigin_2D, ga_rastrigin_2D, label_1 = "PRS algorithm result", label_2 = "GA algorithm result")
run_t.test(prs_rastrigin_10D, ga_rastrigin_10D, label_1 = "PRS algorithm result", label_2 = "GA algorithm result")
run_t.test(prs_rastrigin_20D, ga_rastrigin_20D, label_1 = "PRS algorithm result", label_2 = "GA algorithm result")
draw_plots(prs_rastrigin_10D, ga_rastrigin_10D)
draw_plots(prs_rastrigin_20D, ga_rastrigin_20D)
draw_plots(prs_rastrigin_20D, ga_rastrigin_20D)
draw_plots(prs_rosenbrock_20D, ga_rosenbrock_20D)
